import { FunctionComponent } from 'react';
import * as Semantic from 'semantic-ui-react';
import MDX from '@mdx-js/runtime';
import MD from 'markdown-to-jsx';

const SemanticMDX: FunctionComponent = ({ children }) => {
	return (
		<MDX
			components={{
				md: (props) => <MD {...props} />,
				p: (props) => <p style={{ textAlign: 'justify' }} {...props} />,
				Ref: (props) => <Semantic.Ref {...props} />,
				Confirm: (props) => <Semantic.Confirm {...props} />,
				Pagination: (props) => <Semantic.Pagination {...props} />,
				PaginationItem: (props) => <Semantic.PaginationItem {...props} />,
				Portal: (props) => <Semantic.Portal {...props} />,
				PortalInner: (props) => <Semantic.PortalInner {...props} />,
				Radio: (props) => <Semantic.Radio {...props} />,
				Select: (props) => <Semantic.Select {...props} />,
				TextArea: (props) => <Semantic.TextArea {...props} />,
				TransitionablePortal: (props) => (
					<Semantic.TransitionablePortal {...props} />
				),
				Visibility: (props) => <Semantic.Visibility {...props} />,
				Breadcrumb: (props) => <Semantic.Breadcrumb {...props} />,
				BreadcrumbDivider: (props) => <Semantic.BreadcrumbDivider {...props} />,
				BreadcrumbSection: (props) => <Semantic.BreadcrumbSection {...props} />,
				Form: (props) => <Semantic.Form {...props} />,
				FormButton: (props) => <Semantic.FormButton {...props} />,
				FormCheckbox: (props) => <Semantic.FormCheckbox {...props} />,
				FormDropdown: (props) => <Semantic.FormDropdown {...props} />,
				FormField: (props) => <Semantic.FormField {...props} />,
				FormGroup: (props) => <Semantic.FormGroup {...props} />,
				FormInput: (props) => <Semantic.FormInput {...props} />,
				FormRadio: (props) => <Semantic.FormRadio {...props} />,
				FormSelect: (props) => <Semantic.FormSelect {...props} />,
				FormTextArea: (props) => <Semantic.FormTextArea {...props} />,
				Grid: (props) => <Semantic.Grid {...props} />,
				GridColumn: (props) => <Semantic.GridColumn {...props} />,
				GridRow: (props) => <Semantic.GridRow {...props} />,
				Menu: (props) => <Semantic.Menu {...props} />,
				MenuHeader: (props) => <Semantic.MenuHeader {...props} />,
				MenuItem: (props) => <Semantic.MenuItem {...props} />,
				MenuMenu: (props) => <Semantic.MenuMenu {...props} />,
				Message: (props) => <Semantic.Message {...props} />,
				MessageContent: (props) => <Semantic.MessageContent {...props} />,
				MessageHeader: (props) => <Semantic.MessageHeader {...props} />,
				MessageItem: (props) => <Semantic.MessageItem {...props} />,
				MessageList: (props) => <Semantic.MessageList {...props} />,
				Table: (props) => <Semantic.Table {...props} />,
				TableBody: (props) => <Semantic.TableBody {...props} />,
				TableCell: (props) => <Semantic.TableCell {...props} />,
				TableFooter: (props) => <Semantic.TableFooter {...props} />,
				TableHeader: (props) => <Semantic.TableHeader {...props} />,
				TableHeaderCell: (props) => <Semantic.TableHeaderCell {...props} />,
				TableRow: (props) => <Semantic.TableRow {...props} />,
				Button: (props) => <Semantic.Button {...props} />,
				ButtonContent: (props) => <Semantic.ButtonContent {...props} />,
				ButtonGroup: (props) => <Semantic.ButtonGroup {...props} />,
				ButtonOr: (props) => <Semantic.ButtonOr {...props} />,
				Container: (props) => <Semantic.Container {...props} />,
				Divider: (props) => <Semantic.Divider {...props} />,
				Flag: (props) => <Semantic.Flag {...props} />,
				Header: (props) => <Semantic.Header {...props} />,
				HeaderContent: (props) => <Semantic.HeaderContent {...props} />,
				HeaderSubheader: (props) => <Semantic.HeaderSubheader {...props} />,
				Icon: (props) => <Semantic.Icon {...props} />,
				IconGroup: (props) => <Semantic.IconGroup {...props} />,
				Image: (props) => <Semantic.Image {...props} />,
				ImageGroup: (props) => <Semantic.ImageGroup {...props} />,
				Input: (props) => <Semantic.Input {...props} />,
				Label: (props) => <Semantic.Label {...props} />,
				LabelDetail: (props) => <Semantic.LabelDetail {...props} />,
				LabelGroup: (props) => <Semantic.LabelGroup {...props} />,
				List: (props) => <Semantic.List {...props} />,
				ListContent: (props) => <Semantic.ListContent {...props} />,
				ListDescription: (props) => <Semantic.ListDescription {...props} />,
				ListHeader: (props) => <Semantic.ListHeader {...props} />,
				ListIcon: (props) => <Semantic.ListIcon {...props} />,
				ListItem: (props) => <Semantic.ListItem {...props} />,
				ListList: (props) => <Semantic.ListList {...props} />,
				Loader: (props) => <Semantic.Loader {...props} />,
				Placeholder: (props) => <Semantic.Placeholder {...props} />,
				PlaceholderHeader: (props) => <Semantic.PlaceholderHeader {...props} />,
				PlaceholderImage: (props) => <Semantic.PlaceholderImage {...props} />,
				PlaceholderLine: (props) => <Semantic.PlaceholderLine {...props} />,
				PlaceholderParagraph: (props) => (
					<Semantic.PlaceholderParagraph {...props} />
				),
				Rail: (props) => <Semantic.Rail {...props} />,
				Reveal: (props) => <Semantic.Reveal {...props} />,
				RevealContent: (props) => <Semantic.RevealContent {...props} />,
				Segment: (props) => <Semantic.Segment {...props} />,
				SegmentGroup: (props) => <Semantic.SegmentGroup {...props} />,
				SegmentInline: (props) => <Semantic.SegmentInline {...props} />,
				Step: (props) => <Semantic.Step {...props} />,
				StepContent: (props) => <Semantic.StepContent {...props} />,
				StepDescription: (props) => <Semantic.StepDescription {...props} />,
				StepGroup: (props) => <Semantic.StepGroup {...props} />,
				StepTitle: (props) => <Semantic.StepTitle {...props} />,
				Accordion: (props) => <Semantic.Accordion {...props} />,
				AccordionAccordion: (props) => (
					<Semantic.AccordionAccordion {...props} />
				),
				AccordionContent: (props) => <Semantic.AccordionContent {...props} />,
				AccordionPanel: (props) => <Semantic.AccordionPanel {...props} />,
				AccordionTitle: (props) => <Semantic.AccordionTitle {...props} />,
				Checkbox: (props) => <Semantic.Checkbox {...props} />,
				Dimmer: (props) => <Semantic.Dimmer {...props} />,
				DimmerDimmable: (props) => <Semantic.DimmerDimmable {...props} />,
				DimmerInner: (props) => <Semantic.DimmerInner {...props} />,
				Dropdown: (props) => <Semantic.Dropdown {...props} />,
				DropdownDivider: (props) => <Semantic.DropdownDivider {...props} />,
				DropdownHeader: (props) => <Semantic.DropdownHeader {...props} />,
				DropdownItem: (props) => <Semantic.DropdownItem {...props} />,
				DropdownMenu: (props) => <Semantic.DropdownMenu {...props} />,
				DropdownSearchInput: (props) => (
					<Semantic.DropdownSearchInput {...props} />
				),
				Embed: (props) => <Semantic.Embed {...props} />,
				Modal: (props) => <Semantic.Modal {...props} />,
				ModalActions: (props) => <Semantic.ModalActions {...props} />,
				ModalContent: (props) => <Semantic.ModalContent {...props} />,
				ModalDescription: (props) => <Semantic.ModalDescription {...props} />,
				ModalDimmer: (props) => <Semantic.ModalDimmer {...props} />,
				ModalHeader: (props) => <Semantic.ModalHeader {...props} />,
				Popup: (props) => <Semantic.Popup {...props} />,
				PopupContent: (props) => <Semantic.PopupContent {...props} />,
				PopupHeader: (props) => <Semantic.PopupHeader {...props} />,
				Progress: (props) => <Semantic.Progress {...props} />,
				Rating: (props) => <Semantic.Rating {...props} />,
				RatingIcon: (props) => <Semantic.RatingIcon {...props} />,
				Search: (props) => <Semantic.Search {...props} />,
				SearchCategory: (props) => <Semantic.SearchCategory {...props} />,
				SearchResult: (props) => <Semantic.SearchResult {...props} />,
				SearchResults: (props) => <Semantic.SearchResults {...props} />,
				Sidebar: (props) => <Semantic.Sidebar {...props} />,
				SidebarPushable: (props) => <Semantic.SidebarPushable {...props} />,
				SidebarPusher: (props) => <Semantic.SidebarPusher {...props} />,
				Sticky: (props) => <Semantic.Sticky {...props} />,
				Tab: (props) => <Semantic.Tab {...props} />,
				TabPane: (props) => <Semantic.TabPane {...props} />,
				Transition: (props) => <Semantic.Transition {...props} />,
				TransitionGroup: (props) => <Semantic.TransitionGroup {...props} />,
				Advertisement: (props) => <Semantic.Advertisement {...props} />,
				Card: (props) => <Semantic.Card {...props} />,
				CardContent: (props) => <Semantic.CardContent {...props} />,
				CardDescription: (props) => <Semantic.CardDescription {...props} />,
				CardGroup: (props) => <Semantic.CardGroup {...props} />,
				CardHeader: (props) => <Semantic.CardHeader {...props} />,
				CardMeta: (props) => <Semantic.CardMeta {...props} />,
				Comment: (props) => <Semantic.Comment {...props} />,
				CommentAction: (props) => <Semantic.CommentAction {...props} />,
				CommentActions: (props) => <Semantic.CommentActions {...props} />,
				CommentAuthor: (props) => <Semantic.CommentAuthor {...props} />,
				CommentAvatar: (props) => <Semantic.CommentAvatar {...props} />,
				CommentContent: (props) => <Semantic.CommentContent {...props} />,
				CommentGroup: (props) => <Semantic.CommentGroup {...props} />,
				CommentMetadata: (props) => <Semantic.CommentMetadata {...props} />,
				CommentText: (props) => <Semantic.CommentText {...props} />,
				Feed: (props) => <Semantic.Feed {...props} />,
				FeedContent: (props) => <Semantic.FeedContent {...props} />,
				FeedDate: (props) => <Semantic.FeedDate {...props} />,
				FeedEvent: (props) => <Semantic.FeedEvent {...props} />,
				FeedExtra: (props) => <Semantic.FeedExtra {...props} />,
				FeedLabel: (props) => <Semantic.FeedLabel {...props} />,
				FeedLike: (props) => <Semantic.FeedLike {...props} />,
				FeedMeta: (props) => <Semantic.FeedMeta {...props} />,
				FeedSummary: (props) => <Semantic.FeedSummary {...props} />,
				FeedUser: (props) => <Semantic.FeedUser {...props} />,
				Item: (props) => <Semantic.Item {...props} />,
				ItemContent: (props) => <Semantic.ItemContent {...props} />,
				ItemDescription: (props) => <Semantic.ItemDescription {...props} />,
				ItemExtra: (props) => <Semantic.ItemExtra {...props} />,
				ItemGroup: (props) => <Semantic.ItemGroup {...props} />,
				ItemHeader: (props) => <Semantic.ItemHeader {...props} />,
				ItemImage: (props) => <Semantic.ItemImage {...props} />,
				ItemMeta: (props) => <Semantic.ItemMeta {...props} />,
				Statistic: (props) => <Semantic.Statistic {...props} />,
				StatisticGroup: (props) => <Semantic.StatisticGroup {...props} />,
				StatisticLabel: (props) => <Semantic.StatisticLabel {...props} />,
				StatisticValue: (props) => <Semantic.StatisticValue {...props} />,
			}}
		>
			{children}
		</MDX>
	);
};
export default SemanticMDX;
